import asyncio
import sqlite3
import logging
import os
import datetime
import aiohttp

from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import Command, CommandStart
from aiogram.client.default import DefaultBotProperties

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = "7914894994:AAF1ZN721rA3xDBgGjEUYWeniSjvn7jaINk"
ADMIN_ID = 1754012821
API_URL = "https://api.hh.ru/vacancies"

# === –õ–û–ì–ò ===
logging.basicConfig(
    level=logging.INFO,
    filename="errors.log",
    filemode="a",
    format="%(asctime)s - %(levelname)s - %(message)s"
)

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê ===
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# === –†–ê–°–°–´–õ–ö–ê –î–õ–Ø –ê–î–ú–ò–ù–ê ===
broadcast_mode = set()

# === –†–ï–ì–ò–û–ù–´ –ò –ö–ê–¢–ï–ì–û–†–ò–ò ===
regions = {
    1: "–ú–æ—Å–∫–≤–∞", 2: "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", 66: "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä", 73: "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", 88: "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥",
    104: "–ö–∞–∑–∞–Ω—å", 112: "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥", 113: "–°–∞–º–∞—Ä–∞", 120: "–ß–µ–ª—è–±–∏–Ω—Å–∫"
}
categories = ["–í–æ–¥–∏—Ç–µ–ª—å üöó", "–ü—Ä–æ–¥–∞–≤–µ—Ü üõç", "–ö—É—Ä—å–µ—Ä üì¶", "–£–±–æ—Ä—â–∏–∫ üßπ", "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç üíª", "–†–µ–ø–µ—Ç–∏—Ç–æ—Ä üë®‚Äçüè´", "–°—Ç—Ä–æ–∏—Ç–µ–ª—å üë∑"]

# === –ö–ù–û–ü–ö–ò ===
def main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π", callback_data="search")],
        [InlineKeyboardButton(text="üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="categories")],
        [InlineKeyboardButton(text="üåç –ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏–æ–Ω", callback_data="change_region")]
    ])

def region_keyboard():
    builder = InlineKeyboardBuilder()
    for r_id, name in regions.items():
        builder.button(text=name, callback_data=f"region_{r_id}")
    builder.adjust(2)
    return builder.as_markup()

def category_keyboard():
    builder = InlineKeyboardBuilder()
    for cat in categories:
        keyword = cat.split()[0]
        builder.button(text=cat, callback_data=f"category_{keyword}")
    builder.adjust(2)
    return builder.as_markup()

def admin_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="broadcast")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])

# === –ë–ê–ó–ê –î–ê–ù–ù–´–• ===
def init_db():
    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            region_id INTEGER,
            date_joined TEXT
        )
    """)
    conn.commit()
    conn.close()

def add_user(user):
    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()
    cursor.execute("""
        INSERT OR REPLACE INTO users (user_id, username, first_name, last_name, region_id, date_joined)
        VALUES (?, ?, ?, ?, COALESCE((SELECT region_id FROM users WHERE user_id = ?), NULL), ?)
    """, (
        user.id, user.username, user.first_name, user.last_name, user.id, datetime.datetime.now().isoformat()
    ))
    conn.commit()
    conn.close()

def get_user_region(user_id: int):
    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()
    cursor.execute("SELECT region_id FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else None

def update_user_region(user_id: int, region_id: int):
    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()
    cursor.execute("UPDATE users SET region_id = ? WHERE user_id = ?", (region_id, user_id))
    conn.commit()
    conn.close()

def get_all_user_ids():
    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()
    cursor.execute("SELECT user_id FROM users")
    result = cursor.fetchall()
    conn.close()
    return [r[0] for r in result]

def count_users():
    conn = sqlite3.connect("bot.db")
    cursor = conn.cursor()
    cursor.execute("SELECT COUNT(*) FROM users")
    (res,) = cursor.fetchone()
    conn.close()
    return res

# === HH API ===
async def fetch_vacancies(area_id: int, keyword: str = ""):
    params = {"text": keyword, "area": area_id, "per_page": 5}
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(API_URL, params=params) as resp:
                if resp.status != 200:
                    return []
                data = await resp.json()
                return data.get("items", [])
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–π: {e}")
        return []

async def send_vacancies(message: Message, region_id: int, keyword: str):
    vacancies = await fetch_vacancies(region_id, keyword)
    if not vacancies:
        await message.answer("üòï –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return
    for vac in vacancies:
        name = vac.get("name")
        url = vac.get("alternate_url")
        employer = vac.get("employer", {}).get("name", "")
        salary = vac.get("salary")
        if salary:
            salary_from = salary.get("from")
            salary_to = salary.get("to")
            currency = salary.get("currency", "RUR")
            if salary_from and salary_to:
                salary_text = f"{salary_from} - {salary_to} {currency}"
            elif salary_from:
                salary_text = f"–æ—Ç {salary_from} {currency}"
            elif salary_to:
                salary_text = f"–¥–æ {salary_to} {currency}"
            else:
                salary_text = "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        else:
            salary_text = "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        text = f"<b>{name}</b>\n"
        if employer:
            text += f"–ö–æ–º–ø–∞–Ω–∏—è: {employer}\n"
        text += f"–ó–∞—Ä–ø–ª–∞—Ç–∞: {salary_text}\n"
        text += f"<a href='{url}'>–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>"
        await message.answer(text)

# === –•–ï–ù–î–õ–ï–†–´ ===
@dp.message(CommandStart())
async def start_cmd(message: Message):
    add_user(message.from_user)
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç <b>–†–∞–±–æ—Ç–∞ –°–µ–≥–æ–¥–Ω—è</b>!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=main_menu()
    )

@dp.message(Command("menu"))
async def menu_cmd(message: Message):
    await message.answer("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

@dp.message(Command("admin"))
async def admin_cmd(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await message.answer("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu())

@dp.callback_query(F.data == "change_region")
async def change_region(callback: CallbackQuery):
    await callback.message.answer("üåç –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ä–µ–≥–∏–æ–Ω:", reply_markup=region_keyboard())
    await callback.answer()

@dp.callback_query(F.data.startswith("region_"))
async def set_region(callback: CallbackQuery):
    region_id = int(callback.data.split("_")[1])
    update_user_region(callback.from_user.id, region_id)
    await callback.message.answer(
        f"‚úÖ –†–µ–≥–∏–æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: <b>{regions[region_id]}</b>\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: –≤–æ–¥–∏—Ç–µ–ª—å)"
    )
    await callback.answer()

@dp.callback_query(F.data == "categories")
async def show_categories(callback: CallbackQuery):
    await callback.message.answer("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=category_keyboard())
    await callback.answer()

@dp.callback_query(F.data.startswith("category_"))
async def handle_category(callback: CallbackQuery):
    keyword = callback.data.split("_")[1]
    region_id = get_user_region(callback.from_user.id)
    if not region_id:
        await callback.message.answer("‚ùó –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω: /menu ‚Üí ¬´–ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏–æ–Ω¬ª")
        await callback.answer()
        return
    await send_vacancies(callback.message, region_id, keyword)
    await callback.answer()

@dp.callback_query(F.data == "search")
async def prompt_search(callback: CallbackQuery):
    await callback.message.answer("üîé –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π:")
    await callback.answer()

@dp.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery):
    await callback.message.answer("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
    await callback.answer()

@dp.callback_query(F.data == "broadcast")
async def ask_broadcast(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    broadcast_mode.add(callback.from_user.id)
    await callback.message.answer("‚úâÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    await callback.answer()

@dp.callback_query(F.data == "stats")
async def send_stats(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    c = count_users()
    await callback.message.answer(f"üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{c}</b>")
    await callback.answer()

@dp.message(F.text == "/cancel")
async def cancel_broadcast(message: Message):
    if message.from_user.id in broadcast_mode:
        broadcast_mode.remove(message.from_user.id)
        await message.answer("üö´ –†–µ–∂–∏–º —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω—ë–Ω.")
    else:
        await message.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏.")

@dp.message()
async def handle_message(message: Message):
    if message.from_user.id in broadcast_mode:
        user_ids = get_all_user_ids()
        count = 0
        for uid in user_ids:
            try:
                if message.photo:
                    await bot.send_photo(uid, message.photo[-1].file_id, caption=message.caption or "")
                elif message.video:
                    await bot.send_video(uid, message.video.file_id, caption=message.caption or "")
                else:
                    await bot.send_message(uid, message.text)
                count += 1
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")
        broadcast_mode.remove(message.from_user.id)
        await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {count}")
        return

    keyword = message.text.strip()
    region_id = get_user_region(message.from_user.id)
    if not region_id:
        await message.answer("‚ùó –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω: /menu ‚Üí ¬´–ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏–æ–Ω¬ª")
        return
    await send_vacancies(message, region_id, keyword)

# === –ó–ê–ü–£–°–ö ===
async def main():
    init_db()
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
